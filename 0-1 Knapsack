#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

//recursive solution
int knapsack(int w, vector<int> wt, vector<int> val, int n){
	if(n==0 || w==0)
		return 0;
	if(wt[n-1] > w)
		return knapsack(w, wt, val, n-1);
	return max(knapsack(w, wt, val, n-1), val[n-1]+knapsack(w-wt[n-1], wt, val, n-1);
}

//dynamic approach
int knapsack(int w, vector<int> wt, vector<int> val, int n){
	int dp[n+1][w+1];
	for(int i=0; i<=n; ++i){
		for(int j=0; j<=w; ++j){
			if(i==0 || j==0)
				dp[i][j]=0;
			if(wt[i-1] > j)
				dp[i][j] = dp[i-1][j];
			else
				dp[i][j] = max(dp[i-1][j], val[i-1]+dp[i-1][j-wt[i-1]];
		}
	}
}

int main(){
	int n, w;
	cin>>n>>w;
	vector<int> wt;
	vector<int> val;
	for(int i=0; i<n; ++i){
		int weight,value;
		cin>>weight>>value;
		wt.push_back(weight);
		val.push_back(value);
	}
	cout<<knapsack(w, wt, val, n);
}
